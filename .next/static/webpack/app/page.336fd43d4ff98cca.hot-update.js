"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/apiService.tsx":
/*!*********************************!*\
  !*** ./services/apiService.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\nconst BASE_URL = \"http://localhost:5292/api\";\nconst getAuthHeaders = function() {\n    let requiresAuth = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n    const token = localStorage.getItem(\"token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        ...requiresAuth && token && {\n            Authorization: \"Bearer \".concat(token)\n        }\n    };\n};\nconst apiService = {\n    // Products\n    async getProducts (params) {\n        const queryParams = new URLSearchParams();\n        if (params.colorFilter) queryParams.append(\"colorFilter\", params.colorFilter);\n        queryParams.append(\"pageNumber\", (params.pageNumber || 1).toString());\n        queryParams.append(\"pageSize\", (params.pageSize || 10).toString());\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product?\").concat(queryParams), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch products\");\n        return response.json();\n    },\n    async getProduct (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) return null;\n        return response.json();\n    },\n    async createProduct (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create product\");\n        return response.json();\n    },\n    async updateProduct (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                id,\n                ...data\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to update product\");\n    },\n    async deleteProduct (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete product\");\n    },\n    // Product Variations\n    async getProductVariations () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch product variations\");\n        return response.json();\n    },\n    async getProductVariationsByColor (colorName) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/Color/\").concat(colorName), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch product variations by color\");\n        return response.json();\n    },\n    async getProductVariationsDisplay (colorId) {\n        const queryParams = new URLSearchParams();\n        if (colorId) queryParams.append(\"colorId\", colorId.toString());\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/display?\").concat(queryParams), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch product variations display\");\n        return response.json();\n    },\n    async getProductVariation (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) return null;\n        return response.json();\n    },\n    async createProductVariation (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create product variation\");\n        return response.json();\n    },\n    async updateProductVariation (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update product variation\");\n        return response.json();\n    },\n    async deleteProductVariation (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete product variation\");\n    },\n    // Prices\n    async getPrices () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch prices\");\n        return response.json();\n    },\n    async getPrice (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) return null;\n        return response.json();\n    },\n    async createPrice (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create price\");\n        return response.json();\n    },\n    async updatePrice (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                id,\n                ...data\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to update price\");\n        return response.json();\n    },\n    async deletePrice (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete price\");\n    },\n    // Colors\n    async getColors () {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryParams = new URLSearchParams();\n        if (params.pageNumber) queryParams.append(\"pageNumber\", params.pageNumber.toString());\n        if (params.pageSize) queryParams.append(\"pageSize\", params.pageSize.toString());\n        const response = await fetch(\"\".concat(BASE_URL, \"/Color?\").concat(queryParams), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch colors\");\n        return response.json();\n    },\n    async getColor (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Color/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) return null;\n        return response.json();\n    },\n    // Users\n    async getUsers () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/all\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch users\");\n        return response.json();\n    },\n    async getUser (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) return null;\n        return response.json();\n    },\n    async createUser (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/create\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create user\");\n        return response.json();\n    },\n    async updateUser (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/update\"), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                id,\n                ...data\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to update user\");\n        return response.json();\n    },\n    async deleteUser (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/delete/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete user\");\n    },\n    async getAdmins () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/admins\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch admins\");\n        return response.json();\n    },\n    async getSellers () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/sellers\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch sellers\");\n        return response.json();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/apiService.tsx\n"));

/***/ })

});