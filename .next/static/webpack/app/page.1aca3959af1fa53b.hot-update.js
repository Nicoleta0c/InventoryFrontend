"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/apiService.tsx":
/*!*********************************!*\
  !*** ./services/apiService.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\nconst BASE_URL = \"http://localhost:5292/api\";\nconst getAuthHeaders = function() {\n    let requiresAuth = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n    const token = localStorage.getItem(\"token\");\n    return {\n        \"Content-Type\": \"application/json\",\n        ...requiresAuth && token && {\n            Authorization: \"Bearer \".concat(token)\n        }\n    };\n};\nconst apiService = {\n    // Products\n    async getProducts (params) {\n        const queryParams = new URLSearchParams();\n        if (params.colorFilter) queryParams.append(\"colorFilter\", params.colorFilter);\n        if (params.pageNumber) queryParams.append(\"pageNumber\", params.pageNumber.toString());\n        if (params.pageSize) queryParams.append(\"pageSize\", params.pageSize.toString());\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product?\").concat(queryParams), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch products\");\n        return response.json();\n    },\n    async getProduct (id) {\n        try {\n            const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n                headers: getAuthHeaders(false)\n            });\n            if (!response.ok) return null;\n            const data = await response.json();\n            return {\n                id: data.id,\n                name: data.Name,\n                description: data.Description,\n                imageUrl: data.ImageUrl,\n                brand: data.Brand,\n                createdAt: data.createdAt || new Date().toISOString()\n            };\n        } catch (err) {\n            console.error(\"Failed to fetch product \".concat(id, \":\"), err);\n            return null;\n        }\n    },\n    async createProduct (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create product\");\n        return response.json();\n    },\n    async updateProduct (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update product\");\n        return response.json();\n    },\n    async deleteProduct (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Product/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete product\");\n    },\n    // Product Variations\n    async getProductVariations () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch product variations\");\n        return response.json();\n    },\n    async getProductVariationsByColor (colorName) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/Color/\").concat(colorName), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch product variations by color\");\n        return response.json();\n    },\n    async createProductVariation (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create product variation\");\n        return response.json();\n    },\n    async updateProductVariation (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to update product variation\");\n        return response.json();\n    },\n    async deleteProductVariation (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProductVariation/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete product variation\");\n    },\n    // Colors\n    async getColors (params) {\n        const queryParams = new URLSearchParams();\n        if (params.pageNumber) queryParams.append(\"pageNumber\", params.pageNumber.toString());\n        if (params.pageSize) queryParams.append(\"pageSize\", params.pageSize.toString());\n        const response = await fetch(\"\".concat(BASE_URL, \"/Color?\").concat(queryParams), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch colors\");\n        return response.json();\n    },\n    async getColor (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Color/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch color\");\n        return response.json();\n    },\n    //Prices\n    // Prices\n    async getPrices () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch prices\");\n        return response.json();\n    },\n    async getPrice (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) {\n            if (response.status === 404) return null;\n            throw new Error(\"Failed to fetch price\");\n        }\n        return response.json();\n    },\n    async createPrice (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create price\");\n        return response.json();\n    },\n    async updatePrice (id, data) {\n        const requestData = {\n            id: id,\n            amount: data.amount\n        };\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(requestData)\n        });\n        if (!response.ok) {\n            if (response.status === 404) return null;\n            throw new Error(\"Failed to update price\");\n        }\n        return {\n            id,\n            amount: data.amount\n        };\n    },\n    async deletePrice (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/Price/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) {\n            if (response.status === 404) return false;\n            throw new Error(\"Failed to delete price\");\n        }\n        return true;\n    },\n    // Users\n    async getUsers () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/all\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch users\");\n        return response.json();\n    },\n    async getUser (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/\").concat(id), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch user\");\n        return response.json();\n    },\n    async createUser (data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/create\"), {\n            method: \"POST\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) throw new Error(\"Failed to create user\");\n        return response.json();\n    },\n    async updateUser (id, data) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/update\"), {\n            method: \"PUT\",\n            headers: getAuthHeaders(),\n            body: JSON.stringify({\n                ...data,\n                id\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to update user\");\n        return response.json();\n    },\n    async deleteUser (id) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/delete/\").concat(id), {\n            method: \"DELETE\",\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to delete user\");\n    },\n    async getAdmins () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/admins\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch admins\");\n        return response.json();\n    },\n    async getSellers () {\n        const response = await fetch(\"\".concat(BASE_URL, \"/User/sellers\"), {\n            headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch sellers\");\n        return response.json();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL2FwaVNlcnZpY2UudHN4IiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0FBRWpCLE1BQU1DLGlCQUFpQjtRQUFDQyxnRkFBZTtJQUNyQyxNQUFNQyxRQUFRQyxhQUFhQyxPQUFPLENBQUM7SUFDbkMsT0FBTztRQUNMLGdCQUFnQjtRQUNoQixHQUFJSCxnQkFBZ0JDLFNBQVM7WUFBRUcsZUFBZSxVQUFnQixPQUFOSDtRQUFRLENBQUM7SUFDbkU7QUFDRjtBQUVPLE1BQU1JLGFBQWE7SUFDeEIsV0FBVztJQUNYLE1BQU1DLGFBQVlDLE1BQXdFO1FBQ3hGLE1BQU1DLGNBQWMsSUFBSUM7UUFDeEIsSUFBSUYsT0FBT0csV0FBVyxFQUFFRixZQUFZRyxNQUFNLENBQUMsZUFBZUosT0FBT0csV0FBVztRQUM1RSxJQUFJSCxPQUFPSyxVQUFVLEVBQUVKLFlBQVlHLE1BQU0sQ0FBQyxjQUFjSixPQUFPSyxVQUFVLENBQUNDLFFBQVE7UUFDbEYsSUFBSU4sT0FBT08sUUFBUSxFQUFFTixZQUFZRyxNQUFNLENBQUMsWUFBWUosT0FBT08sUUFBUSxDQUFDRCxRQUFRO1FBRTVFLE1BQU1FLFdBQVcsTUFBTUMsTUFBTSxHQUF1QlIsT0FBcEJWLFVBQVMsYUFBdUIsT0FBWlUsY0FBZTtZQUNqRVMsU0FBU2xCO1FBQ1g7UUFFQSxJQUFJLENBQUNnQixTQUFTRyxFQUFFLEVBQUUsTUFBTSxJQUFJQyxNQUFNO1FBQ2xDLE9BQU9KLFNBQVNLLElBQUk7SUFDdEI7SUFFQSxNQUFNQyxZQUFXQyxFQUFVO1FBQ3pCLElBQUk7WUFDRixNQUFNUCxXQUFXLE1BQU1DLE1BQU0sR0FBdUJNLE9BQXBCeEIsVUFBUyxhQUFjLE9BQUh3QixLQUFNO2dCQUN4REwsU0FBU2xCLGVBQWU7WUFDMUI7WUFDQSxJQUFJLENBQUNnQixTQUFTRyxFQUFFLEVBQUUsT0FBTztZQUN6QixNQUFNSyxPQUFPLE1BQU1SLFNBQVNLLElBQUk7WUFDaEMs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SUFBSUMsTUFBTTtRQUNsQyxPQUFPSixTQUFTSyxJQUFJO0lBQ3RCO0lBRUEsTUFBTTZDLFlBQVczQyxFQUFVO1FBQ3pCLE1BQU1QLFdBQVcsTUFBTUMsTUFBTSxHQUEyQk0sT0FBeEJ4QixVQUFTLGlCQUFrQixPQUFId0IsS0FBTTtZQUM1RGlCLFFBQVE7WUFDUnRCLFNBQVNsQjtRQUNYO1FBQ0EsSUFBSSxDQUFDZ0IsU0FBU0csRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtJQUNwQztJQUVBLE1BQU0rQztRQUNKLE1BQU1uRCxXQUFXLE1BQU1DLE1BQU0sR0FBWSxPQUFUbEIsVUFBUyxpQkFBZTtZQUN0RG1CLFNBQVNsQjtRQUNYO1FBQ0EsSUFBSSxDQUFDZ0IsU0FBU0csRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtRQUNsQyxPQUFPSixTQUFTSyxJQUFJO0lBQ3RCO0lBRUEsTUFBTStDO1FBQ0osTUFBTXBELFdBQVcsTUFBTUMsTUFBTSxHQUFZLE9BQVRsQixVQUFTLGtCQUFnQjtZQUN2RG1CLFNBQVNsQjtRQUNYO1FBQ0EsSUFBSSxDQUFDZ0IsU0FBU0csRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtRQUNsQyxPQUFPSixTQUFTSyxJQUFJO0lBQ3RCO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxuaWljb1xcT25lRHJpdmVcXERlc2t0b3BcXEZyb250ZW5kSW52ZW50b3J5XFxGcm9udGVuZEludmVudG9yeVxcc2VydmljZXNcXGFwaVNlcnZpY2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJBU0VfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjUyOTIvYXBpXCJcblxuY29uc3QgZ2V0QXV0aEhlYWRlcnMgPSAocmVxdWlyZXNBdXRoID0gdHJ1ZSkgPT4ge1xuICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIilcbiAgcmV0dXJuIHtcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAuLi4ocmVxdWlyZXNBdXRoICYmIHRva2VuICYmIHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAgfSksXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGFwaVNlcnZpY2UgPSB7XG4gIC8vIFByb2R1Y3RzXG4gIGFzeW5jIGdldFByb2R1Y3RzKHBhcmFtczogeyBjb2xvckZpbHRlcj86IHN0cmluZzsgcGFnZU51bWJlcj86IG51bWJlcjsgcGFnZVNpemU/OiBudW1iZXIgfSkge1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gICAgaWYgKHBhcmFtcy5jb2xvckZpbHRlcikgcXVlcnlQYXJhbXMuYXBwZW5kKFwiY29sb3JGaWx0ZXJcIiwgcGFyYW1zLmNvbG9yRmlsdGVyKVxuICAgIGlmIChwYXJhbXMucGFnZU51bWJlcikgcXVlcnlQYXJhbXMuYXBwZW5kKFwicGFnZU51bWJlclwiLCBwYXJhbXMucGFnZU51bWJlci50b1N0cmluZygpKVxuICAgIGlmIChwYXJhbXMucGFnZVNpemUpIHF1ZXJ5UGFyYW1zLmFwcGVuZChcInBhZ2VTaXplXCIsIHBhcmFtcy5wYWdlU2l6ZS50b1N0cmluZygpKVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJvZHVjdD8ke3F1ZXJ5UGFyYW1zfWAsIHtcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgfSlcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBwcm9kdWN0c1wiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBnZXRQcm9kdWN0KGlkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJvZHVjdC8ke2lkfWAsIHtcbiAgICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoZmFsc2UpLCAvLyBDYW1iaWEgYSB0cnVlIHNpIGVsIGVuZHBvaW50IHJlcXVpZXJlIGF1dGVudGljYWNpw7NuXG4gICAgICB9KVxuICAgICAgaWYgKCFyZXNwb25zZS5vaykgcmV0dXJuIG51bGxcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICBuYW1lOiBkYXRhLk5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLkRlc2NyaXB0aW9uLFxuICAgICAgICBpbWFnZVVybDogZGF0YS5JbWFnZVVybCxcbiAgICAgICAgYnJhbmQ6IGRhdGEuQnJhbmQsXG4gICAgICAgIGNyZWF0ZWRBdDogZGF0YS5jcmVhdGVkQXQgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGZldGNoIHByb2R1Y3QgJHtpZH06YCwgZXJyKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0sXG5cbiAgYXN5bmMgY3JlYXRlUHJvZHVjdChkYXRhOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Qcm9kdWN0YCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgcHJvZHVjdFwiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyB1cGRhdGVQcm9kdWN0KGlkOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L1Byb2R1Y3QvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgfSlcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdXBkYXRlIHByb2R1Y3RcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH0sXG5cbiAgYXN5bmMgZGVsZXRlUHJvZHVjdChpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJvZHVjdC8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgfSlcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVsZXRlIHByb2R1Y3RcIilcbiAgfSxcblxuICAvLyBQcm9kdWN0IFZhcmlhdGlvbnNcbiAgYXN5bmMgZ2V0UHJvZHVjdFZhcmlhdGlvbnMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJvZHVjdFZhcmlhdGlvbmAsIHtcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgfSlcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggcHJvZHVjdCB2YXJpYXRpb25zXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9LFxuXG4gIGFzeW5jIGdldFByb2R1Y3RWYXJpYXRpb25zQnlDb2xvcihjb2xvck5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L1Byb2R1Y3RWYXJpYXRpb24vQ29sb3IvJHtjb2xvck5hbWV9YCwge1xuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBwcm9kdWN0IHZhcmlhdGlvbnMgYnkgY29sb3JcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH0sXG5cbiAgYXN5bmMgY3JlYXRlUHJvZHVjdFZhcmlhdGlvbihkYXRhOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Qcm9kdWN0VmFyaWF0aW9uYCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgcHJvZHVjdCB2YXJpYXRpb25cIilcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH0sXG5cbiAgYXN5bmMgdXBkYXRlUHJvZHVjdFZhcmlhdGlvbihpZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Qcm9kdWN0VmFyaWF0aW9uLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pXG4gICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHVwZGF0ZSBwcm9kdWN0IHZhcmlhdGlvblwiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBkZWxldGVQcm9kdWN0VmFyaWF0aW9uKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Qcm9kdWN0VmFyaWF0aW9uLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBkZWxldGUgcHJvZHVjdCB2YXJpYXRpb25cIilcbiAgfSxcblxuICAvLyBDb2xvcnNcbiAgYXN5bmMgZ2V0Q29sb3JzKHBhcmFtczogeyBwYWdlTnVtYmVyPzogbnVtYmVyOyBwYWdlU2l6ZT86IG51bWJlciB9KSB7XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgICBpZiAocGFyYW1zLnBhZ2VOdW1iZXIpIHF1ZXJ5UGFyYW1zLmFwcGVuZChcInBhZ2VOdW1iZXJcIiwgcGFyYW1zLnBhZ2VOdW1iZXIudG9TdHJpbmcoKSlcbiAgICBpZiAocGFyYW1zLnBhZ2VTaXplKSBxdWVyeVBhcmFtcy5hcHBlbmQoXCJwYWdlU2l6ZVwiLCBwYXJhbXMucGFnZVNpemUudG9TdHJpbmcoKSlcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L0NvbG9yPyR7cXVlcnlQYXJhbXN9YCwge1xuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBjb2xvcnNcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH0sXG5cbiAgYXN5bmMgZ2V0Q29sb3IoaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L0NvbG9yLyR7aWR9YCwge1xuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBjb2xvclwiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuXG4gIC8vUHJpY2VzXG5cbiAgLy8gUHJpY2VzXG5hc3luYyBnZXRQcmljZXMoKTogUHJvbWlzZTx7IGlkOiBudW1iZXIsIGFtb3VudDogbnVtYmVyIH1bXT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9QcmljZWAsIHtcbiAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICB9KTtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHByaWNlc1wiKTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn0sXG5cbmFzeW5jIGdldFByaWNlKGlkOiBudW1iZXIpOiBQcm9taXNlPHsgaWQ6IG51bWJlciwgYW1vdW50OiBudW1iZXIgfSB8IG51bGw+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJpY2UvJHtpZH1gLCB7XG4gICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybiBudWxsO1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBwcmljZVwiKTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufSxcblxuYXN5bmMgY3JlYXRlUHJpY2UoZGF0YTogeyBhbW91bnQ6IG51bWJlciB9KTogUHJvbWlzZTx7IGlkOiBudW1iZXIsIGFtb3VudDogbnVtYmVyIH0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vUHJpY2VgLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICB9KTtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBwcmljZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn0sXG5cbmFzeW5jIHVwZGF0ZVByaWNlKGlkOiBudW1iZXIsIGRhdGE6IHsgYW1vdW50OiBudW1iZXIgfSk6IFByb21pc2U8eyBpZDogbnVtYmVyLCBhbW91bnQ6IG51bWJlciB9IHwgbnVsbD4ge1xuICBjb25zdCByZXF1ZXN0RGF0YSA9IHtcbiAgICBpZDogaWQsXG4gICAgYW1vdW50OiBkYXRhLmFtb3VudFxuICB9O1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L1ByaWNlLyR7aWR9YCwge1xuICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3REYXRhKSxcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuIG51bGw7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHVwZGF0ZSBwcmljZVwiKTtcbiAgfVxuICByZXR1cm4geyBpZCwgYW1vdW50OiBkYXRhLmFtb3VudCB9O1xufSxcblxuYXN5bmMgZGVsZXRlUHJpY2UoaWQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9QcmljZS8ke2lkfWAsIHtcbiAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybiBmYWxzZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVsZXRlIHByaWNlXCIpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufSxcblxuXG4gIC8vIFVzZXJzXG4gIGFzeW5jIGdldFVzZXJzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L1VzZXIvYWxsYCwge1xuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1c2Vyc1wiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBnZXRVc2VyKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Vc2VyLyR7aWR9YCwge1xuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1c2VyXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9LFxuXG4gIGFzeW5jIGNyZWF0ZVVzZXIoZGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vVXNlci9jcmVhdGVgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogZ2V0QXV0aEhlYWRlcnMoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIH0pXG4gICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSB1c2VyXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9LFxuXG4gIGFzeW5jIHVwZGF0ZVVzZXIoaWQ6IHN0cmluZywgZGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vVXNlci91cGRhdGVgLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyAuLi5kYXRhLCBpZCB9KSxcbiAgICB9KVxuICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byB1cGRhdGUgdXNlclwiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBkZWxldGVVc2VyKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9Vc2VyL2RlbGV0ZS8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgfSlcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVsZXRlIHVzZXJcIilcbiAgfSxcblxuICBhc3luYyBnZXRBZG1pbnMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vVXNlci9hZG1pbnNgLCB7XG4gICAgICBoZWFkZXJzOiBnZXRBdXRoSGVhZGVycygpLFxuICAgIH0pXG4gICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGFkbWluc1wiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBnZXRTZWxsZXJzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L1VzZXIvc2VsbGVyc2AsIHtcbiAgICAgIGhlYWRlcnM6IGdldEF1dGhIZWFkZXJzKCksXG4gICAgfSlcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggc2VsbGVyc1wiKVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcbn0iXSwibmFtZXMiOlsiQkFTRV9VUkwiLCJnZXRBdXRoSGVhZGVycyIsInJlcXVpcmVzQXV0aCIsInRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkF1dGhvcml6YXRpb24iLCJhcGlTZXJ2aWNlIiwiZ2V0UHJvZHVjdHMiLCJwYXJhbXMiLCJxdWVyeVBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImNvbG9yRmlsdGVyIiwiYXBwZW5kIiwicGFnZU51bWJlciIsInRvU3RyaW5nIiwicGFnZVNpemUiLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm9rIiwiRXJyb3IiLCJqc29uIiwiZ2V0UHJvZHVjdCIsImlkIiwiZGF0YSIsIm5hbWUiLCJOYW1lIiwiZGVzY3JpcHRpb24iLCJEZXNjcmlwdGlvbiIsImltYWdlVXJsIiwiSW1hZ2VVcmwiLCJicmFuZCIsIkJyYW5kIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiY3JlYXRlUHJvZHVjdCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlUHJvZHVjdCIsImRlbGV0ZVByb2R1Y3QiLCJnZXRQcm9kdWN0VmFyaWF0aW9ucyIsImdldFByb2R1Y3RWYXJpYXRpb25zQnlDb2xvciIsImNvbG9yTmFtZSIsImNyZWF0ZVByb2R1Y3RWYXJpYXRpb24iLCJ1cGRhdGVQcm9kdWN0VmFyaWF0aW9uIiwiZGVsZXRlUHJvZHVjdFZhcmlhdGlvbiIsImdldENvbG9ycyIsImdldENvbG9yIiwiZ2V0UHJpY2VzIiwiZ2V0UHJpY2UiLCJzdGF0dXMiLCJjcmVhdGVQcmljZSIsInVwZGF0ZVByaWNlIiwicmVxdWVzdERhdGEiLCJhbW91bnQiLCJkZWxldGVQcmljZSIsImdldFVzZXJzIiwiZ2V0VXNlciIsImNyZWF0ZVVzZXIiLCJ1cGRhdGVVc2VyIiwiZGVsZXRlVXNlciIsImdldEFkbWlucyIsImdldFNlbGxlcnMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/apiService.tsx\n"));

/***/ })

});